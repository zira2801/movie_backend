const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const prisma = new PrismaClient();

const transporter = nodemailer.createTransport({
  service: 'Gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret_key';
const OTP_EXPIRY = 10 * 60 * 1000;
const MAX_REFRESH_TOKENS = 5;

const sendResponse = (res, statusCode, message, data = null) => {
  res.status(statusCode).json({
    status: statusCode,
    message,
    data,
  });
};

const sendOtpEmail = async (email, otp) => {
  const mailOptions = {
    from: `"MovieVerse" <${process.env.EMAIL_USER}>`,
    to: email,
    subject: 'üé¨ X√°c th·ª±c t√†i kho·∫£n - M√£ OTP c·ªßa b·∫°n',
    html: `
        <div style="font-family: 'Segoe UI', sans-serif; max-width: 600px; margin: auto; padding: 20px; border-radius: 10px; background: #1e1e1e; color: #ffffff;">
          <h2 style="text-align: center; color: #ff3c00;">üé¨ MovieVerse</h2>
          <p>Xin ch√†o,</p>
          <p>B·∫°n ƒëang th·ª±c hi·ªán ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>MovieVerse</strong>.</p>
          <p>Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c minh t√†i kho·∫£n c·ªßa b·∫°n:</p>
          <div style="text-align: center; margin: 30px 0;">
            <span style="font-size: 32px; font-weight: bold; background: #ffffff; color: #1e1e1e; padding: 10px 20px; border-radius: 8px; display: inline-block;">${otp}</span>
          </div>
          <p>M√£ OTP c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong>.</p>
          <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒëi·ªÅu n√†y, h√£y b·ªè qua email n√†y.</p>
          <hr style="border: none; border-top: 1px solid #444;" />
          <p style="font-size: 12px; text-align: center; color: #aaa;">
            ¬© 2025 MovieVerse. All rights reserved.
          </p>
        </div>
      `,
  };

  try {
    await transporter.sendMail(mailOptions);
  } catch (emailError) {
    console.error('L·ªói g·ª≠i email:', emailError);
    throw new Error('Kh√¥ng th·ªÉ g·ª≠i OTP qua email');
  }
};

const generateUserCode = (user) => {
  return `USR-2025-${String(user.id).padStart(6, '0')}`;
};

const generateAccessToken = (user) => {
  const payload = {
    sub: generateUserCode(user),
    email: user.email,
    iat: Math.floor(Date.now() / 1000),
    iss: 'movie-app',
    aud: 'movie-app-users',
  };
  return jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });
};

const generateRefreshToken = (user) => {
  const payload = {
    sub: generateUserCode(user),
    email: user.email,
    iat: Math.floor(Date.now() / 1000),
    iss: 'movie-app',
    aud: 'movie-app-users',
  };
  return jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' });
};

const register = async (req, res) => {
  const { email, password, username } = req.body;

  if (!email || !password || !username) {
    return sendResponse(res, 400, 'Email, m·∫≠t kh·∫©u v√† t√™n ng∆∞·ªùi d√πng l√† b·∫Øt bu·ªôc');
  }
  if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
    return sendResponse(res, 400, 'Email kh√¥ng h·ª£p l·ªá');
  }
  if (password.length < 6) {
    return sendResponse(res, 400, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
  }
  if (!/[A-Z]/.test(password)) {
    return sendResponse(res, 400, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 k√Ω t·ª± vi·∫øt hoa');
  }
  if (!/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
    return sendResponse(res, 400, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát');
  }
  if (!/[0-9]/.test(password)) {
    return sendResponse(res, 400, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 s·ªë');
  }
  if (!/[a-zA-Z]/.test(password)) {
    return sendResponse(res, 400, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ c√°i');
  }
  if (username.length < 3) {
    return sendResponse(res, 400, 'T√™n ng∆∞·ªùi d√πng ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±');
  }

  try {
    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser) {
      return sendResponse(res, 400, 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
    }

    const existingUsername = await prisma.user.findUnique({ where: { username } });
    if (existingUsername) {
      return sendResponse(res, 400, 'T√™n ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
    }

    const existingTempUser = await prisma.tempUser.findUnique({ where: { email } });
    if (existingTempUser) {
      await prisma.tempUser.delete({ where: { email } });
    }

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const otpExpires = new Date(Date.now() + OTP_EXPIRY);
    const hashedPassword = await bcrypt.hash(password, 10);

    await prisma.tempUser.create({
      data: {
        email,
        username,
        password: hashedPassword,
        otp,
        otpExpires,
      },
    });

    await sendOtpEmail(email, otp);
    sendResponse(res, 200, 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n');
  } catch (error) {
    console.error('L·ªói khi ƒëƒÉng k√Ω:', error);
    sendResponse(res, 500, error.message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω ƒëƒÉng k√Ω');
  }
};

const verifyOtpRegister = async (req, res) => {
  const { email, otp } = req.body;

  if (!email || !otp) {
    return sendResponse(res, 400, 'Email v√† OTP l√† b·∫Øt bu·ªôc');
  }

  try {
    const tempUser = await prisma.tempUser.findUnique({ where: { email } });
    if (!tempUser || tempUser.otp !== otp || tempUser.otpExpires < new Date()) {
      return sendResponse(res, 400, 'OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    const newUser = await prisma.user.create({
      data: {
        email: tempUser.email,
        username: tempUser.username,
        password: tempUser.password,
      },
      select: {
        id: true,
        email: true,
        username: true,
        fullName: true,
        avatar: true,
        role: true,
        createdAt: true,
        updatedAt: true,
      },
    });

    await prisma.tempUser.delete({ where: { email } });

    const accessToken = generateAccessToken(newUser);
    const refreshToken = generateRefreshToken(newUser);

    await prisma.refreshToken.create({
      data: {
        token: refreshToken,
        userId: newUser.id,
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
      },
    });

    const responseData = {
      accessToken,
      refreshToken,
      user: newUser,
    };
    sendResponse(res, 200, 'ƒêƒÉng k√Ω th√†nh c√¥ng', responseData);
  } catch (error) {
    console.error('L·ªói khi x√°c th·ª±c OTP:', error);
    sendResponse(res, 500, 'Kh√¥ng th·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω');
  }
};

const verifyOtpResetPassword = async (req, res) => {
  const { email, otp } = req.body;

  if (!email || !otp) {
    return sendResponse(res, 400, 'Email v√† OTP l√† b·∫Øt bu·ªôc');
  }

  try {
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user || user.otp !== otp || user.otpExpires < new Date()) {
      return sendResponse(res, 400, 'OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    await prisma.user.update({
      where: { email },
      data: { otp: null, otpExpires: null },
    });

    sendResponse(res, 200, 'X√°c th·ª±c th√†nh c√¥ng');
  } catch (error) {
    console.error('L·ªói khi x√°c th·ª±c OTP:', error);
    sendResponse(res, 500, 'Kh√¥ng th·ªÉ ho√†n t·∫•t x√°c th·ª±c OTP');
  }
};

const login = async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return sendResponse(res, 400, 'Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc');
  }

  try {
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user || !user.password) {
      return sendResponse(res, 400, 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return sendResponse(res, 400, 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
    }

    const accessToken = generateAccessToken(user);
    const refreshToken = generateRefreshToken(user);

    await prisma.refreshToken.deleteMany({ where: { userId: user.id } });

    const tokenCount = await prisma.refreshToken.count({ where: { userId: user.id } });
    if (tokenCount >= MAX_REFRESH_TOKENS) {
      const oldestToken = await prisma.refreshToken.findFirst({
        where: { userId: user.id },
        orderBy: { createdAt: 'asc' },
      });
      if (oldestToken) {
        await prisma.refreshToken.delete({ where: { id: oldestToken.id } });
      }
    }

    await prisma.refreshToken.create({
      data: {
        token: refreshToken,
        userId: user.id,
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
      },
    });

    const infoUser = await prisma.user.findUnique({
      where: { email },
      select: {
        id: true,
        email: true,
        username: true,
        fullName: true,
        avatar: true,
        role: true,
        createdAt: true,
        updatedAt: true,
      },
    });

    const responseData = {
      accessToken,
      refreshToken,
      user: infoUser,
    };

    sendResponse(res, 200, 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng', responseData);
  } catch (error) {
    console.error('L·ªói khi ƒëƒÉng nh·∫≠p:', error);
    sendResponse(res, 500, 'Kh√¥ng th·ªÉ x·ª≠ l√Ω ƒëƒÉng nh·∫≠p');
  }
};

const forgotPassword = async (req, res) => {
  const { email } = req.body;
  if (!email) {
    return sendResponse(res, 400, 'Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
  }
  try {
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) {
      return sendResponse(res, 404, 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
    }

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const otpExpires = new Date(Date.now() + OTP_EXPIRY);

    await prisma.user.update({
      where: { email },
      data: { otp, otpExpires },
    });

    await sendOtpEmail(email, otp);

    sendResponse(res, 200, 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n');
  } catch (error) {
    console.error('L·ªói khi g·ª≠i OTP:', error);
    sendResponse(res, 500, 'Kh√¥ng th·ªÉ g·ª≠i m√£ OTP');
  }
};

const resetPassword = async (req, res) => {
  const { email, newPassword } = req.body;

  if (!newPassword) {
    return sendResponse(res, 400, 'M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
  }

  if (newPassword.length < 6) {
    return sendResponse(res, 400, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
  }
  if (!/[A-Z]/.test(newPassword)) {
    return sendResponse(res, 400, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 k√Ω t·ª± vi·∫øt hoa');
  }
  if (!/[!@#$%^&*(),.?":{}|<>]/.test(newPassword)) {
    return sendResponse(res, 400, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát');
  }
  if (!/[0-9]/.test(newPassword)) {
    return sendResponse(res, 400, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 s·ªë');
  }
  if (!/[a-zA-Z]/.test(newPassword)) {
    return sendResponse(res, 400, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ c√°i');
  }

  try {
    const user = await prisma.user.findUnique({ where: { email } });
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    await prisma.user.update({
      where: { email },
      data: { password: hashedPassword },
    });

    sendResponse(res, 200, 'C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng');
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:', error);
    sendResponse(res, 500, 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u');
  }
};

const refreshAccessToken = async (req, res) => {
  const { refreshToken } = req.body;

  if (!refreshToken) {
    return sendResponse(res, 400, 'Refresh Token l√† b·∫Øt bu·ªôc');
  }

  try {
    const storedToken = await prisma.refreshToken.findFirst({
      where: { token: refreshToken },
      include: { user: true },
    });

    if (!storedToken || storedToken.expiresAt < new Date()) {
      return sendResponse(res, 401, 'Refresh Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    const decoded = jwt.verify(refreshToken, JWT_SECRET);
    const accessToken = generateAccessToken(storedToken.user);

    sendResponse(res, 200, 'T·∫°o Access Token m·ªõi th√†nh c√¥ng', { accessToken });
  } catch (error) {
    console.error('L·ªói khi l√†m m·ªõi token:', error);
    return sendResponse(res, 403, 'Refresh Token kh√¥ng h·ª£p l·ªá');
  }
};

const logout = async (req, res) => {
  const { refreshToken } = req.body;

  if (!refreshToken) {
    return sendResponse(res, 400, 'Refresh Token l√† b·∫Øt bu·ªôc');
  }

  try {
    await prisma.refreshToken.deleteMany({ where: { token: refreshToken } });
    sendResponse(res, 200, 'ƒêƒÉng xu·∫•t th√†nh c√¥ng');
  } catch (error) {
    console.error('L·ªói khi ƒëƒÉng xu·∫•t:', error);
    sendResponse(res, 500, 'Kh√¥ng th·ªÉ ƒëƒÉng xu·∫•t');
  }
};

const authenticateToken = async (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return sendResponse(res, 401, 'Y√™u c·∫ßu Access Token');
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    console.error('L·ªói x√°c th·ª±c token:', error);
    if (error.name === 'TokenExpiredError') {
      return sendResponse(res, 401, 'Access Token ƒë√£ h·∫øt h·∫°n, vui l√≤ng s·ª≠ d·ª•ng Refresh Token');
    }
    return sendResponse(res, 403, 'Token kh√¥ng h·ª£p l·ªá');
  }
};

process.on('SIGTERM', async () => {
  await prisma.$disconnect();
  process.exit(0);
});

process.on('SIGINT', async () => {
  await prisma.$disconnect();
  process.exit(0);
});

module.exports = {
  register,
  verifyOtpRegister,
  verifyOtpResetPassword,
  login,
  forgotPassword,
  resetPassword,
  refreshAccessToken,
  logout,
  authenticateToken,
};